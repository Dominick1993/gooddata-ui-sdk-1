// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FluidLayoutBuilder .addRow() should add a row to the end of the layout by default: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Added row",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .addRow() should add a row to the end of the layout by default: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .addRow() should add a row to the provided index: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Added row",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .addRow() should add a row to the provided index: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRow() should modify the row: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Modified row",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRow() should modify the row: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Original row",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRow() should throw error, when the row at provided index does not exist 1`] = `"Cannot modify the row - row at index 0 does not exist!"`;

exports[`FluidLayoutBuilder .modifyRows() should modify all rows by default: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Modified row 0",
      },
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Modified row 1",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should modify all rows by default: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should modify selected row only: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Modified row",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should modify selected row only: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Original row",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should modify selected rows only: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Modified row 0",
      },
    },
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Modified row 2",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should modify selected rows only: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Original row",
      },
    },
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Original row",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should not modify any row, when selection result is undefined: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .modifyRows() should not modify any row, when selection result is undefined: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .moveRow() should move the row: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row 1",
      },
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row 0",
      },
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row 2",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .moveRow() should move the row: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row 0",
      },
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row 1",
      },
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row 2",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .moveRow() should throw error, when the row at provided index does not exist 1`] = `"Cannot move the row - row at index 0 does not exist!"`;

exports[`FluidLayoutBuilder .removeRow() should remove the row from the layout: after 1`] = `
Object {
  "rows": Array [],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRow() should remove the row from the layout: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row to remove",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRow() should throw error, when the row at provided index does not exist 1`] = `"Cannot remove the row - row at index 0 does not exist!"`;

exports[`FluidLayoutBuilder .removeRows() should not remove any row, when selection result is undefined: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should not remove any row, when selection result is undefined: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should remove all rows by default: after 1`] = `
Object {
  "rows": Array [],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should remove all rows by default: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should remove selected row only: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should remove selected row only: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row to remove",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should remove selected rows only: after 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row to keep 1",
      },
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row to keep 2",
      },
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .removeRows() should remove selected rows only: before 1`] = `
Object {
  "rows": Array [
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row to keep 1",
      },
    },
    Object {
      "columns": Array [],
    },
    Object {
      "columns": Array [],
      "header": Object {
        "title": "Row to keep 2",
      },
    },
    Object {
      "columns": Array [],
    },
  ],
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .size() should update size by callback 1`] = `
Object {
  "rows": Array [],
  "size": Object {
    "heightAsRatio": 50,
    "widthAsGridColumnsCount": 12,
  },
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .size() should update size by callback returning undefined 1`] = `
Object {
  "rows": Array [],
  "size": undefined,
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .size() should update size by undefined 1`] = `
Object {
  "rows": Array [],
  "size": undefined,
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder .size() should update size by value 1`] = `
Object {
  "rows": Array [],
  "size": Object {
    "heightAsRatio": 50,
    "widthAsGridColumnsCount": 12,
  },
  "type": "fluidLayout",
}
`;

exports[`FluidLayoutBuilder constructors .for() should throw error, when the layout is damaged 1`] = `"Provided data must be IFluidLayout!"`;

exports[`FluidLayoutBuilder constructors .forNewLayout() should create new empty layout 1`] = `
Object {
  "rows": Array [],
  "type": "fluidLayout",
}
`;
